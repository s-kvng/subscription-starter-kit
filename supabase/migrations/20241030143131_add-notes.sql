create table "public"."notes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "content" text,
    "user_id" uuid not null
);


alter table "public"."notes" enable row level security;

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."notes" add constraint "notes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notes" validate constraint "notes_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_note()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$declare
  subscription subscriptions%ROWTYPE;
  number_of_notes int;
  notes_allowed_for_subscription_tier int;
BEGIN
  -- check user's subcription is active
  select * into subscription from subscriptions where user_id = auth.uid();

  if(subscription is null or subscription.status != 'active') then
    raise exception 'user is not subscribed';
  end if;
  -- count their existing note
  select count(*) 
  into number_of_notes 
  from notes 
  where user_id = auth.uid();
  -- number of notes < threshold of subscription
  select notes_allowed into notes_allowed_for_subscription_tier from rules where rules.product_id = (
    select prices.product_id from prices where prices.id = subscription.price_id
  );

  if(number_of_notes >= notes_allowed_for_subscription_tier)then       
     raise exception 'number of notes exceed subscription tier';
  end if;

  return new;
END;$function$
;

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

create policy "Users can read their notes"
on "public"."notes"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "user can insert their own note"
on "public"."notes"
as permissive
for insert
to authenticated
with check ((user_id = auth.uid()));


CREATE TRIGGER tr_on_insert_note BEFORE INSERT ON public.notes FOR EACH ROW EXECUTE FUNCTION handle_new_note();



